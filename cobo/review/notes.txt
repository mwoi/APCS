Team Slightly Under-ripe Bananas (Joshua Yagupsky, Marcus Wu, Ivina Wang)
APCS pd7
L06 -- Read/Review/Expand
2022-02-13
time spent: -- 5 hrs

consumer review lab

================================
activity 1
introduction (reviews and sentimental value)
================================
1.
  a. public static double sentimentalVal( String word )
  b. sentimentVal requires a String input as its parameter. if you pass an int,
     it will return an error: int cannot be converted to String.
  c. sentimentVal returns a double.

2.
  Method Call				Return Value
  sentimentVal("handsome");		2.12
  sentimentVal("hallway");		-0.33
  sentimentVal("harsh");		-2.66

3.
  a. double num = sentimentVal("warm");
     this statement compiles since sentimentVal takes a String and returns a double.
  b. String word = sentimentVal(0.5);
     this statement does not compile since sentimentVal does not take a double and
      does not return a String.
  c. double x = sentimentVal("good", "bad");
     this statement does not compile since sentimentVal only takes 1 String input.

================================
activity 2
sentiment value and star ratings
================================
4.
  totalSentiment takes in the name of a txt file as an input, then reads the content
  of the txt file, converting it to a string, and then iterates through every word of
  the string to add up the sentimentVal's of each word, returning the total.

5.
  a. no. All the "real" fake reviews return back as one star- but when we create a
     "fake" fake reviews with just positive words from the csv file, it returns back
     as five star.
     SimpleReview.txt returned with a totalSentiment of -3.24 and a star rating of 1
  b. 1) We could multiply the value of each word by a certain number to increase the
        impact on the total sentiment.
     2) We could have it return a "percentage" rating, dividing the sentiment by the
        number of words so that just increasing the length of a review doesn't impact the rating.

6.
  a. If the total sentiment is above 15, the method will output 0. However, if it is below 15
     and above 10, it will return 4
  b. You can add an initial if statement that will return five stars if the totalSentiment >= 15

================================
activity 3
autogenerated review
================================
3.
  indexOf() returns index of the first occurrence of a substring or character in a given string,
  returning -1 if it is not found. substring() returns the portion of a string between the specified indices.
  It includes the beginning index but excludes the ending index. This means that when splitting
  the string into two parts, the first part will be str.substring(0,p) and str.substring(p, end).
  If we want to cut the string into two parts with the first one containing a space, we need to add one
  to its position, since the end is not included in the substring.

5.
  Static methods are methods of the class as a whole. If one wishes to call static method testMethod
  from class testClass, the syntax is testClass.testMethod()
  Non static methods, however, can only be called by specific instances of a class. One would have to
  make a new instance testClass and use it to call testMethod if the method were not static.

6.
  there is a randomPositiveAdj() and a randomNegativeAdj() method, which can replace annotated
  adjectives in the review with only positive or only negative adjectives, creating a fake
  positive or fake negative review. we just need to replace randomAdjective() in fakeReview with
  randomPositiveAdj() or randomNegativeAdj().

================================
activity 4
create a positive or negative review
================================
1.
  You can autogenerate negative reviews to bombard restaurants you don't like with negative reviews on their yelp.

2.
  You can autogenerate positive reviews to make your restaurant seem better than it actually is.

3.
  words = get list of words from file
  output = ""
  punctuation = ""
  happy = is the review good or bad?
  for each word:
    put trailing punctuation in punctuation
    remove trailing punctuation from word
    if word starts with *:
      if the word is the wrong sentiment compared to the overall sentiment
        replace it
      else:
        remove the asterisk
    add the modified word + punctuation + a space to the output
  return the output

5.
  word but missing the first character

6.
  the method compares strings from the review txt file and the csv file. if the review has "*test," and
  the csv file with word values has "test", they will not be the same and sentimentVal will return 0.
  the punctuation needs to be removed before comparing.

7.
  instead of making a negative review more negative, you can replace the negative adjectives with only
  positive adjectives. you can also make the method only replace the adjectives with words that have
  sentiment values of over 2.0.

================================
activity 5
create a positive or negative review
================================

1. At first we considered doing wordle, but that's limited to five letter words, and it's hard to show colors on the terminal screen. Hangman
   seemed like any easy to implement alternative that allows us to recycle code from the positive/negative review lab.

2. At first, we tried doing a traditional hangman game, but that turned out to be difficult to implement. Our non-traditional hangman game
  gives the user which letters are in the word, and they have to unscramble it

3. public static String shuffle(String word)
   We needed the word as a parameter in order to scramble the word.
   Made it static because there's no reason to have multiple instances of the Activity class

4. str = word.substring(0,index) + word.substring(index+1,word.length()) + word.charAt(index);
   Uses substring and charAt...
  // soemthing about what ssdflknsfg

5.
    if (input.equals(word)) {
      System.out.println("congratz you got the word " + word);
    }
    else {
      if (guesses == 4)
        System.out.println("you lost :)");
      else
        System.out.println("sorry try again :(");
  // something another way to be done :')
  if (input.equals(word)) {
    System.out.println("congratz you got the word " + word);
  }
  else if (guesses == 4)
    System.out.println("you lost :)");
  else
    System.out.println("sorry try again :(");
6. for ( int i = 0; i < 10; i++ )
{
  String str;
  int index = (int)( Math.random() * word.length() );
  str = word.substring(0,index) + word.substring(index+1,word.length()) + word.charAt(index);
  word = str;
}
return word;
}

it repeatedly shuffles one letter.
you can use... a while loops to accomplish the same thing
while (i < 10)
{
  String str;
  int index = (int)( Math.random() * word.length() );
  str = word.substring(0,index) + word.substring(index+1,word.length()) + word.charAt(index);
  word = str;
}
return word;
}
